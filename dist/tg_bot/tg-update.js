"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotUpdate = void 0;
const common_1 = require("@nestjs/common");
const nestjs_telegraf_1 = require("nestjs-telegraf");
const telegraf_1 = require("telegraf");
const tg_bot_service_1 = require("./tg_bot.service");
let BotUpdate = class BotUpdate {
    botService;
    constructor(botService) {
        this.botService = botService;
    }
    async startCommand(ctx) {
        await ctx.reply('–ö–∞–∫ –¥–µ–ª–∞ –ù–ï–ì–†–´!');
    }
    async handleTex(ctx) {
        const message = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
        if (typeof message !== 'string' || !message.startsWith('17'))
            return;
        const cleanText = typeof message === 'string' ? message.slice(2).trim().toLowerCase() : '';
        const responses = {
            hi: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞? –º–æ–∂–µ—Ç –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ —É–ª—É—á—à–∏—Ç—å—Å—è?',
            –ø—Ä–∏–≤–µ—Ç: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞? –º–æ–∂–µ—Ç –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ —É–ª—É—á—à–∏—Ç—å—Å—è?',
            '–∫–∞–∫ –¥–µ–ª–∞?': '–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –∞ —É —Ç–µ–±—è?',
            '–û–ª–µ–≥ —Ç–æ–ø?': '–û–ª–µ–≥+ —Ç–æ–ø, –ê –¢–´ –∫—Ä—É—Ç!',
            '–∫—Ç–æ —Å–æ—Å–∞–ª?': '–£–ú–ê–† –∏ –í–ï–†–ê –°–û–°–£–¢–°–Ø! –•–ü–ê–•–ü–ê–•–ü–ê–•üíÄ',
            —Ö–æ—Ä–æ—à–æ: '–æ—Ç–ª–∏—á–Ω–æ! —É–¥–∞—á–∏!',
            '–∫—Ç–æ —Å–æ—Å–∞–ª': '–£–ú–ê–† –∏ –í–ï–†–ê –°–û–°–£–¢–°–Ø! –•–ü–ê–•–ü–ê–•–ü–ê–•',
            '—è —Ç–≤–æ—é –º–∞–º—É –µ–±–∞–ª': ' –Ø —Ç–≤–æ—é –º–∞–º—É –µ–±–∞–ª, –∞ —Ç—ã? üóø',
            '—Ç—ã –±–æ—Ç?': '–Ø –±–æ—Ç, –∞ —Ç—ã –∫—Ç–æ?',
            '—Ç—ã –ª–æ—Ö?': '–¢—ã –ª–æ—Ö, –∞ —è –†–ê–ë–û–í–õ–ê–î–ï–õ–ï–¶ –¢–í–û–ô! –•–ü–ê–•–ü–ê–•–ü–ê–•üíÄ',
            '–∫—Ç–æ —Ç–∞–∫–æ–π –û–ª–µ–≥?': '–í–æ–ø—Ä–æ—Å:"–∫—Ç–æ —Ç–∞–∫–æ–π –û–ª–µ–≥?" - –û–ù –¢–í–û–ô –í–õ–ê–î–ï–õ–ï–¢–¶! –°–ú–´–°–õ –ñ–ò–ó–ù–ò - –≠–¢–û –û–ù! üóø',
            '–æ–ª–µ–≥ –≥–µ–π': '–û–ª–µ–≥ –Ω–µ –≥–µ–π, –ê –¢–´ –ì–ï–ô!',
            '–∞–ª–µ–≥ –≥–µ–π': '–û–ª–µ–≥ –Ω–µ –≥–µ–π, –ê –¢–´ –ì–ï–ô!',
            '–æ–ª–µ–≥ –≥–µ–π?': '–û–ª–µ–≥ –Ω–µ –≥–µ–π, –ê –¢–´ –ì–ï–ô!',
            '–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?': '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–û–ô-17-BOT!',
            '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?': '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ!',
            '—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?': '–Ø –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–æ–≥—Ä–∞–º–º–∞, —É –º–µ–Ω—è –Ω–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞!',
            '—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É': '–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤!',
            —Ö–∞—Ö–∞—Ö–∞: '—è —Ä–∞–¥ —á—Ç–æ —Ç—ã —Å–º–µ–µ—à—å—Å—è! üóø',
            '—á—Ç–æ —Ç–∞–∫–æ–µ nestjs?': 'NestJS ‚Äî —ç—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Node.js.',
            '—è –≥–µ–π?': '–º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–æ —ç—Ç–æ –Ω–µ –≤–∞–∂–Ω–æ! –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª —Å—á–∞—Å—Ç–ª–∏–≤!(—Ö–æ—Ç—è–±–µ –∫–∞–∫ –º–∞—Ç–≤–µ–π)',
            '—á—Ç–æ —Ç–∞–∫–æ–µ telegraf?': 'Telegraf ‚Äî —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–±–æ—Ç–æ–≤ –Ω–∞ Node.js.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ typescript?': 'TypeScript ‚Äî —ç—Ç–æ –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–¥ JavaScript, –¥–æ–±–∞–≤–ª—è—é—â–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ javascript?': 'JavaScript ‚Äî —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ html?': 'HTML ‚Äî —ç—Ç–æ —è–∑—ã–∫ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ vpn?': 'VPN ‚Äî —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ firewall?': 'Firewall ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ—Ç–∏ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ cloud?': '–û–±–ª–∞–∫–æ ‚Äî —ç—Ç–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ aws?': 'AWS ‚Äî —ç—Ç–æ –æ–±–ª–∞—á–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ç Amazon.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ azure?': 'Azure ‚Äî —ç—Ç–æ –æ–±–ª–∞—á–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ç Microsoft.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ gcp?': 'GCP ‚Äî —ç—Ç–æ –æ–±–ª–∞—á–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ç Google.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ saas?': 'SaaS ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞–∫ —É—Å–ª—É–≥–∏.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ paas?': 'PaaS ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–∞–∫ —É—Å–ª—É–≥–∏.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ iaas?': 'IaaS ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–∫ —É—Å–ª—É–≥–∏.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ serverless?': 'Serverless ‚Äî —ç—Ç–æ –º–æ–¥–µ–ª—å, –≥–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è—é—Ç —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ container?': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî —ç—Ç–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ virtualization?': '–í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ churn rate?': 'Churn Rate ‚Äî —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç—Ç–æ–∫–∞.',
            '—á—Ç–æ —Ç–∞–∫–æ–µ retention rate?': 'Retention Rate ‚Äî —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É–¥–µ—Ä–∂–∞–Ω–∏—è.',
            '—É–º–∞—Ä –≥–µ–π': '–£–º–∞—Ä –≥–µ–π, –ê –¢–´ —Ö–æ—Ä–æ—à!üóø',
            '—É–º–∞—Ä –≥–µ–π?': '–£–º–∞—Ä –≥–µ–π, –ê –¢–´ —Ö–æ—Ä–æ—à!üóø',
            '—Ç–µ–±–µ —ç—Ç–æ –Ω—É–∂–Ω–æ!': '–û–öüóø',
            '—É–º–∞—Ä –≥–µ–π!': '–£–º–∞—Ä –≥–µ–π, –ê –¢–´ —Ö–æ—Ä–æ—à!üóø',
            '–∫—Ç–æ —Ç–∞–∫–∞—è –º–∞—à–∞?': '–ú–∞—à–∞ ‚Äî —ç—Ç–æ –¥–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª—é–±–∏—Ç –≥—É–ª—è—Ç—å –ø–æ –ø–∞—Ä–∫—É –∏ –ø–∏—Ç—å –∫–æ—Ñ–µ.',
            '–º–∞—Ç–≤–µ–π –≥–µ–π?': '–ú–∞—Ç–≤–µ–π –≥–µ..., –Ω–µ –æ–Ω –º–Ω–µ –¥–∞–ª –∞–¥–º–∏–Ω–∫—É –æ–Ω —Ö–æ—Ä–æ—à! üóø',
            '–¥–∞–ª–µ—Ä –≥–µ–π': '–î–∞–ª–µ—Ä –∏–∑ –æ–¥–Ω–∏—Ö –ª–µ–≥–µ–Ω–¥.... ü•∫',
            '–¥–∞–ª–µ—Ä –≥–µ–π?': '–î–∞–ª–µ—Ä –∏–∑ –æ–¥–Ω–∏—Ö –ª–µ–≥–µ–Ω–¥.... ü•∫',
            '–¥–∞–ª–µ—Ä –≥–µ–π!': '–î–∞–ª–µ—Ä –∏–∑ –æ–¥–Ω–∏—Ö –ª–µ–≥–µ–Ω–¥.... ü•∫',
            '—Ç—ã –≥–µ–π?': '–Ø –Ω–µ –≥–µ–π, –∞ —Ç—ã –ø–æ—Ö–æ–∂–µ —Ç–∞–∫–æ–π –µ—Å–ª–∏ —Ç–∞–∫–∏–π –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–µ—à üóø',
            '—Ç—ã –ª–æ—Ö': '–¢—ã –ª–æ—Ö, –∞ —è –†–ê–ë–û–í–õ–ê–î–ï–õ–ï–¶ –¢–í–û–ô! –•–ü–ê–•–ü–ê–•–ü–ê–•üíÄ',
        };
        const response = responses[cleanText];
        if (response) {
            const formattedMessage = `‚ùì —Å–æ–æ–±—à–µ–Ω–∏—è: "${message}"\n\nüí¨ –û—Ç–≤–µ—Ç: ${response}`;
            await ctx.reply(formattedMessage);
        }
        else {
            if (ctx.message && 'text' in ctx.message) {
                const message = ctx.message.text;
                if (!message.startsWith('17')) {
                    return;
                }
                if (!message) {
                    await ctx.reply('–æ—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                    return;
                }
                const trimmedMessage = message.slice(2).trim();
                try {
                    await ctx.reply('üõéÔ∏è–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
                    const aiResponse = await this.botService.askAI(trimmedMessage);
                    await ctx.reply(` ${aiResponse}`);
                }
                catch (error) {
                    console.error('Error calling AI service:', error);
                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
                }
            }
            else {
                await ctx.reply('Xatolik: mat–Ω topilmadi.');
            }
        }
    }
    async handleEditedMessage(ctx) {
        const user = ctx.editedMessage?.from;
        const previousMessage = ctx.editedMessage && 'text' in ctx.editedMessage
            ? ctx.editedMessage.text
            : undefined;
        if (previousMessage && user) {
            await ctx.reply(`@${user.username || user.first_name} –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞: "${previousMessage}"`);
        }
        else {
            await ctx.reply('Tahrirlangan xabar topilmadi.');
        }
    }
};
exports.BotUpdate = BotUpdate;
__decorate([
    (0, nestjs_telegraf_1.Command)('start'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "startCommand", null);
__decorate([
    (0, nestjs_telegraf_1.On)('text'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "handleTex", null);
__decorate([
    (0, nestjs_telegraf_1.On)('edited_message'),
    __param(0, (0, nestjs_telegraf_1.Ctx)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [telegraf_1.Context]),
    __metadata("design:returntype", Promise)
], BotUpdate.prototype, "handleEditedMessage", null);
exports.BotUpdate = BotUpdate = __decorate([
    (0, nestjs_telegraf_1.Update)(),
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [tg_bot_service_1.AiService])
], BotUpdate);
//# sourceMappingURL=tg-update.js.map